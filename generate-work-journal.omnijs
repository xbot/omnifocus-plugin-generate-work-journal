/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Donie",
    "identifier": "org.0x3f.generate_work_journal",
    "version": "1.1",
    "description": "Assemble work logs of today and put them in clipboard.",
    "label": "Generate work journal",
    "shortLabel": "Generate work journal",
    "paletteLabel": "Generate work journal",
    "image": "list.number"
}*/
(() => {
    if (!Task.prototype.isTaggedUnder) {
        Task.prototype.isTaggedUnder = function (tag) {
            return this.tags.some(t => {
                while (t) {
                    if (t.id.primaryKey === tag.id.primaryKey) {
                        return true;
                    }

                    t = t.parent;

                    if (t === null) {
                        return false;
                    }
                }
            });
        };
    }

    function get_work_logs() {
        const journal_folder_name = "Work";
        const journal_date = new Date();

        var logs = new Array();

        folderNamed(journal_folder_name).flattenedProjects.forEach((proj) => {
            let completed_tasks = proj.flattenedTasks.filter(
                (task) =>
                    task.completed === true &&
                    task.completionDate.toDateString() ===
                        journal_date.toDateString() &&
                    !task.isTaggedUnder(tagNamed("People"))
            );
            logs = logs.concat(completed_tasks);
        });

        return logs;
    }

    var action = new PlugIn.Action(function (selection, sender) {
        try {
            let logs = get_work_logs();

            if (logs.length === 0) {
                throw { name: "Emmm...", message: "日志为空。" };
            }

            logs.sort((a, b) => {
                if (a.completionDate > b.completionDate) {
                    return -1;
                } else if (a.completionDate < b.completionDate) {
                    return 1;
                } else {
                    return 0;
                }
            });

            let logsByProject = {};

            logs.forEach((log) => {
                const projectName = log.containingProject.name;
                if (typeof logsByProject[projectName] === "undefined") {
                    logsByProject[projectName] = [log];
                } else {
                    logsByProject[projectName].push(log);
                }
            });

            let logStrings = [];

            for (const [projectName, logs] of Object.entries(logsByProject)) {
                const logSubStrings = logs.map((log) => {
                    let logSubStringParts = [];

                    logSubStringParts.push(log.name);

                    if (log.name.indexOf("面试") < 0) {
                        logSubStringParts.push(
                            log.note.length > 0
                                ? log.note.replaceAll("\n", " ")
                                : "完成"
                        );
                    }

                    return logSubStringParts.join(" ");
                });

                if (projectName === "Work") {
                    logStrings = logStrings.concat(logSubStrings);
                } else {
                    logStrings.push(
                        projectName + " " + logSubStrings.join(" ")
                    );
                }
            }

            Pasteboard.general.string = logStrings.join("\n");

            new Alert("Wow!", "已生成工作日志并复制到剪贴板。").show();
        } catch (err) {
            new Alert(err.name, err.message).show();
        }
    });

    action.validate = function (selection, sender) {
        let logs = get_work_logs();

        return logs.length > 0;
    };

    return action;
})();
